// Code generated by Prisma (prisma@1.23.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  favorite: (where?: FavoriteWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  recArea: (where?: RecAreaWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  activities: (
    args?: {
      where?: ActivityWhereInput;
      orderBy?: ActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Activity>;
  activitiesConnection: (
    args?: {
      where?: ActivityWhereInput;
      orderBy?: ActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActivityConnectionPromise;
  favorite: (where: FavoriteWhereUniqueInput) => FavoritePromise;
  favorites: (
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Favorite>;
  favoritesConnection: (
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FavoriteConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImagePromise;
  images: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Image>;
  imagesConnection: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ImageConnectionPromise;
  recArea: (where: RecAreaWhereUniqueInput) => RecAreaPromise;
  recAreas: (
    args?: {
      where?: RecAreaWhereInput;
      orderBy?: RecAreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RecArea>;
  recAreasConnection: (
    args?: {
      where?: RecAreaWhereInput;
      orderBy?: RecAreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RecAreaConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewPromise;
  reviews: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Review>;
  reviewsConnection: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (
    args: { data: ActivityUpdateInput; where: ActivityWhereUniqueInput }
  ) => ActivityPromise;
  updateManyActivities: (
    args: { data: ActivityUpdateManyMutationInput; where?: ActivityWhereInput }
  ) => BatchPayloadPromise;
  upsertActivity: (
    args: {
      where: ActivityWhereUniqueInput;
      create: ActivityCreateInput;
      update: ActivityUpdateInput;
    }
  ) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createFavorite: (data: FavoriteCreateInput) => FavoritePromise;
  updateFavorite: (
    args: { data: FavoriteUpdateInput; where: FavoriteWhereUniqueInput }
  ) => FavoritePromise;
  upsertFavorite: (
    args: {
      where: FavoriteWhereUniqueInput;
      create: FavoriteCreateInput;
      update: FavoriteUpdateInput;
    }
  ) => FavoritePromise;
  deleteFavorite: (where: FavoriteWhereUniqueInput) => FavoritePromise;
  deleteManyFavorites: (where?: FavoriteWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (
    args: { data: ImageUpdateInput; where: ImageWhereUniqueInput }
  ) => ImagePromise;
  updateManyImages: (
    args: { data: ImageUpdateManyMutationInput; where?: ImageWhereInput }
  ) => BatchPayloadPromise;
  upsertImage: (
    args: {
      where: ImageWhereUniqueInput;
      create: ImageCreateInput;
      update: ImageUpdateInput;
    }
  ) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createRecArea: (data: RecAreaCreateInput) => RecAreaPromise;
  updateRecArea: (
    args: { data: RecAreaUpdateInput; where: RecAreaWhereUniqueInput }
  ) => RecAreaPromise;
  updateManyRecAreas: (
    args: { data: RecAreaUpdateManyMutationInput; where?: RecAreaWhereInput }
  ) => BatchPayloadPromise;
  upsertRecArea: (
    args: {
      where: RecAreaWhereUniqueInput;
      create: RecAreaCreateInput;
      update: RecAreaUpdateInput;
    }
  ) => RecAreaPromise;
  deleteRecArea: (where: RecAreaWhereUniqueInput) => RecAreaPromise;
  deleteManyRecAreas: (where?: RecAreaWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (
    args: { data: ReviewUpdateInput; where: ReviewWhereUniqueInput }
  ) => ReviewPromise;
  updateManyReviews: (
    args: { data: ReviewUpdateManyMutationInput; where?: ReviewWhereInput }
  ) => BatchPayloadPromise;
  upsertReview: (
    args: {
      where: ReviewWhereUniqueInput;
      create: ReviewCreateInput;
      update: ReviewUpdateInput;
    }
  ) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  favorite: (
    where?: FavoriteSubscriptionWhereInput
  ) => FavoriteSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  recArea: (
    where?: RecAreaSubscriptionWhereInput
  ) => RecAreaSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FavoriteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "IMAGECREATE"
  | "IMAGEDELETE"
  | "FAVORITECREATE"
  | "FAVORITEDELETE"
  | "RECAREACREATE"
  | "RECAREAUPDATE"
  | "RECAREADELETE"
  | "REVIEWCREATE"
  | "REVIEWUPDATE"
  | "REVIEWDELETE";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type RecAreaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "directions_ASC"
  | "directions_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "long_ASC"
  | "long_DESC"
  | "mapUrl_ASC"
  | "mapUrl_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "facebookId_ASC"
  | "facebookId_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "twitterId_ASC"
  | "twitterId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailValidated_ASC"
  | "emailValidated_DESC"
  | "validateEmailToken_ASC"
  | "validateEmailToken_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ImageUpdateWithWhereUniqueWithoutUserInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutUserDataInput;
}

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ReviewCreateWithoutUserInput {
  content?: String;
  rating: Int;
  recArea: RecAreaCreateOneWithoutReviewsInput;
  images?: ImageCreateManyWithoutReviewInput;
}

export interface FavoriteUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteWhereUniqueInput;
  update: FavoriteUpdateWithoutUserDataInput;
  create: FavoriteCreateWithoutUserInput;
}

export interface RecAreaCreateOneWithoutReviewsInput {
  create?: RecAreaCreateWithoutReviewsInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ActivityUpdateWithWhereUniqueWithoutRecAreasInput {
  where: ActivityWhereUniqueInput;
  data: ActivityUpdateWithoutRecAreasDataInput;
}

export interface RecAreaCreateWithoutReviewsInput {
  activities?: ActivityCreateManyWithoutRecAreasInput;
  description: String;
  directions?: String;
  favorites?: FavoriteCreateManyWithoutRecAreaInput;
  images?: ImageCreateManyWithoutRecAreaInput;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ImageCreateManyWithoutReviewInput {
  create?: ImageCreateWithoutReviewInput[] | ImageCreateWithoutReviewInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
}

export interface RecAreaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RecAreaWhereInput;
  AND?: RecAreaSubscriptionWhereInput[] | RecAreaSubscriptionWhereInput;
  OR?: RecAreaSubscriptionWhereInput[] | RecAreaSubscriptionWhereInput;
  NOT?: RecAreaSubscriptionWhereInput[] | RecAreaSubscriptionWhereInput;
}

export interface ImageCreateWithoutReviewInput {
  user: UserCreateOneWithoutImagesInput;
  recArea?: RecAreaCreateOneWithoutImagesInput;
  image: String;
  largeImage?: String;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ImageWhereInput;
  AND?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
  OR?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
  NOT?: ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput;
}

export interface ReviewCreateOneWithoutImagesInput {
  create?: ReviewCreateWithoutImagesInput;
  connect?: ReviewWhereUniqueInput;
}

export interface FavoriteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  recArea?: RecAreaWhereInput;
  AND?: FavoriteWhereInput[] | FavoriteWhereInput;
  OR?: FavoriteWhereInput[] | FavoriteWhereInput;
  NOT?: FavoriteWhereInput[] | FavoriteWhereInput;
}

export interface ReviewCreateWithoutImagesInput {
  content?: String;
  user: UserCreateOneWithoutReviewsInput;
  rating: Int;
  recArea: RecAreaCreateOneWithoutReviewsInput;
}

export interface UserUpdateManyMutationInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  emailValidated?: Boolean;
  validateEmailToken?: String;
  name?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
}

export interface ActivityUpdateInput {
  name?: String;
  recAreas?: RecAreaUpdateOneRequiredWithoutActivitiesInput;
}

export interface ActivityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  recAreas?: RecAreaWhereInput;
  AND?: ActivityWhereInput[] | ActivityWhereInput;
  OR?: ActivityWhereInput[] | ActivityWhereInput;
  NOT?: ActivityWhereInput[] | ActivityWhereInput;
}

export interface RecAreaUpdateOneRequiredWithoutActivitiesInput {
  create?: RecAreaCreateWithoutActivitiesInput;
  update?: RecAreaUpdateWithoutActivitiesDataInput;
  upsert?: RecAreaUpsertWithoutActivitiesInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface UserCreateInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email: String;
  emailValidated?: Boolean;
  validateEmailToken: String;
  favorites?: FavoriteCreateManyWithoutUserInput;
  images?: ImageCreateManyWithoutUserInput;
  name: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  resetToken: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewCreateManyWithoutUserInput;
}

export interface RecAreaUpdateWithoutActivitiesDataInput {
  description?: String;
  directions?: String;
  favorites?: FavoriteUpdateManyWithoutRecAreaInput;
  images?: ImageUpdateManyWithoutRecAreaInput;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
  reviews?: ReviewUpdateManyWithoutRecAreaInput;
}

export interface ReviewUpdateInput {
  content?: String;
  user?: UserUpdateOneRequiredWithoutReviewsInput;
  rating?: Int;
  recArea?: RecAreaUpdateOneRequiredWithoutReviewsInput;
  images?: ImageUpdateManyWithoutReviewInput;
}

export interface FavoriteUpdateManyWithoutRecAreaInput {
  create?:
    | FavoriteCreateWithoutRecAreaInput[]
    | FavoriteCreateWithoutRecAreaInput;
  delete?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  connect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  disconnect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  update?:
    | FavoriteUpdateWithWhereUniqueWithoutRecAreaInput[]
    | FavoriteUpdateWithWhereUniqueWithoutRecAreaInput;
  upsert?:
    | FavoriteUpsertWithWhereUniqueWithoutRecAreaInput[]
    | FavoriteUpsertWithWhereUniqueWithoutRecAreaInput;
  deleteMany?: FavoriteScalarWhereInput[] | FavoriteScalarWhereInput;
}

export interface ReviewCreateInput {
  content?: String;
  user: UserCreateOneWithoutReviewsInput;
  rating: Int;
  recArea: RecAreaCreateOneWithoutReviewsInput;
  images?: ImageCreateManyWithoutReviewInput;
}

export interface FavoriteUpdateWithWhereUniqueWithoutRecAreaInput {
  where: FavoriteWhereUniqueInput;
  data: FavoriteUpdateWithoutRecAreaDataInput;
}

export interface RecAreaUpdateInput {
  activities?: ActivityUpdateManyWithoutRecAreasInput;
  description?: String;
  directions?: String;
  favorites?: FavoriteUpdateManyWithoutRecAreaInput;
  images?: ImageUpdateManyWithoutRecAreaInput;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
  reviews?: ReviewUpdateManyWithoutRecAreaInput;
}

export interface FavoriteUpdateWithoutRecAreaDataInput {
  user?: UserUpdateOneRequiredWithoutFavoritesInput;
}

export interface RecAreaCreateInput {
  activities?: ActivityCreateManyWithoutRecAreasInput;
  description: String;
  directions?: String;
  favorites?: FavoriteCreateManyWithoutRecAreaInput;
  images?: ImageCreateManyWithoutRecAreaInput;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
  reviews?: ReviewCreateManyWithoutRecAreaInput;
}

export interface UserUpdateOneRequiredWithoutFavoritesInput {
  create?: UserCreateWithoutFavoritesInput;
  update?: UserUpdateWithoutFavoritesDataInput;
  upsert?: UserUpsertWithoutFavoritesInput;
  connect?: UserWhereUniqueInput;
}

export interface ImageUpdateInput {
  user?: UserUpdateOneRequiredWithoutImagesInput;
  recArea?: RecAreaUpdateOneWithoutImagesInput;
  review?: ReviewUpdateOneWithoutImagesInput;
  image?: String;
  largeImage?: String;
}

export interface UserUpdateWithoutFavoritesDataInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  emailValidated?: Boolean;
  validateEmailToken?: String;
  images?: ImageUpdateManyWithoutUserInput;
  name?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewUpdateManyWithoutUserInput;
}

export interface ImageCreateInput {
  user: UserCreateOneWithoutImagesInput;
  recArea?: RecAreaCreateOneWithoutImagesInput;
  review?: ReviewCreateOneWithoutImagesInput;
  image: String;
  largeImage?: String;
}

export interface ImageUpdateManyWithoutUserInput {
  create?: ImageCreateWithoutUserInput[] | ImageCreateWithoutUserInput;
  delete?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  disconnect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  update?:
    | ImageUpdateWithWhereUniqueWithoutUserInput[]
    | ImageUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ImageUpsertWithWhereUniqueWithoutUserInput[]
    | ImageUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  updateMany?:
    | ImageUpdateManyWithWhereNestedInput[]
    | ImageUpdateManyWithWhereNestedInput;
}

export interface FavoriteCreateInput {
  user: UserCreateOneWithoutFavoritesInput;
  recArea: RecAreaCreateOneWithoutFavoritesInput;
}

export interface FavoriteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: FavoriteScalarWhereInput[] | FavoriteScalarWhereInput;
  OR?: FavoriteScalarWhereInput[] | FavoriteScalarWhereInput;
  NOT?: FavoriteScalarWhereInput[] | FavoriteScalarWhereInput;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ImageUpdateWithoutUserDataInput {
  recArea?: RecAreaUpdateOneWithoutImagesInput;
  review?: ReviewUpdateOneWithoutImagesInput;
  image?: String;
  largeImage?: String;
}

export interface FavoriteUpsertWithWhereUniqueWithoutRecAreaInput {
  where: FavoriteWhereUniqueInput;
  update: FavoriteUpdateWithoutRecAreaDataInput;
  create: FavoriteCreateWithoutRecAreaInput;
}

export interface RecAreaUpdateOneWithoutImagesInput {
  create?: RecAreaCreateWithoutImagesInput;
  update?: RecAreaUpdateWithoutImagesDataInput;
  upsert?: RecAreaUpsertWithoutImagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RecAreaWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  validateEmailToken?: String;
  resetToken?: String;
}>;

export interface RecAreaUpdateWithoutImagesDataInput {
  activities?: ActivityUpdateManyWithoutRecAreasInput;
  description?: String;
  directions?: String;
  favorites?: FavoriteUpdateManyWithoutRecAreaInput;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
  reviews?: ReviewUpdateManyWithoutRecAreaInput;
}

export interface RecAreaUpsertWithoutImagesInput {
  update: RecAreaUpdateWithoutImagesDataInput;
  create: RecAreaCreateWithoutImagesInput;
}

export interface ActivityUpdateManyWithoutRecAreasInput {
  create?:
    | ActivityCreateWithoutRecAreasInput[]
    | ActivityCreateWithoutRecAreasInput;
  delete?: ActivityWhereUniqueInput[] | ActivityWhereUniqueInput;
  connect?: ActivityWhereUniqueInput[] | ActivityWhereUniqueInput;
  disconnect?: ActivityWhereUniqueInput[] | ActivityWhereUniqueInput;
  update?:
    | ActivityUpdateWithWhereUniqueWithoutRecAreasInput[]
    | ActivityUpdateWithWhereUniqueWithoutRecAreasInput;
  upsert?:
    | ActivityUpsertWithWhereUniqueWithoutRecAreasInput[]
    | ActivityUpsertWithWhereUniqueWithoutRecAreasInput;
  deleteMany?: ActivityScalarWhereInput[] | ActivityScalarWhereInput;
  updateMany?:
    | ActivityUpdateManyWithWhereNestedInput[]
    | ActivityUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface ImageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  recArea?: RecAreaWhereInput;
  review?: ReviewWhereInput;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  AND?: ImageWhereInput[] | ImageWhereInput;
  OR?: ImageWhereInput[] | ImageWhereInput;
  NOT?: ImageWhereInput[] | ImageWhereInput;
}

export interface ActivityCreateInput {
  name: String;
  recAreas: RecAreaCreateOneWithoutActivitiesInput;
}

export interface ActivityUpdateWithoutRecAreasDataInput {
  name?: String;
}

export interface RecAreaCreateWithoutActivitiesInput {
  description: String;
  directions?: String;
  favorites?: FavoriteCreateManyWithoutRecAreaInput;
  images?: ImageCreateManyWithoutRecAreaInput;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
  reviews?: ReviewCreateManyWithoutRecAreaInput;
}

export interface ActivityUpsertWithWhereUniqueWithoutRecAreasInput {
  where: ActivityWhereUniqueInput;
  update: ActivityUpdateWithoutRecAreasDataInput;
  create: ActivityCreateWithoutRecAreasInput;
}

export interface FavoriteCreateWithoutRecAreaInput {
  user: UserCreateOneWithoutFavoritesInput;
}

export interface ActivityScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ActivityScalarWhereInput[] | ActivityScalarWhereInput;
  OR?: ActivityScalarWhereInput[] | ActivityScalarWhereInput;
  NOT?: ActivityScalarWhereInput[] | ActivityScalarWhereInput;
}

export interface UserCreateWithoutFavoritesInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email: String;
  emailValidated?: Boolean;
  validateEmailToken: String;
  images?: ImageCreateManyWithoutUserInput;
  name: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  resetToken: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewCreateManyWithoutUserInput;
}

export interface ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput;
  data: ActivityUpdateManyDataInput;
}

export interface ImageCreateWithoutUserInput {
  recArea?: RecAreaCreateOneWithoutImagesInput;
  review?: ReviewCreateOneWithoutImagesInput;
  image: String;
  largeImage?: String;
}

export interface ActivityUpdateManyDataInput {
  name?: String;
}

export interface RecAreaCreateWithoutImagesInput {
  activities?: ActivityCreateManyWithoutRecAreasInput;
  description: String;
  directions?: String;
  favorites?: FavoriteCreateManyWithoutRecAreaInput;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
  reviews?: ReviewCreateManyWithoutRecAreaInput;
}

export interface ReviewUpdateManyWithoutRecAreaInput {
  create?: ReviewCreateWithoutRecAreaInput[] | ReviewCreateWithoutRecAreaInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutRecAreaInput[]
    | ReviewUpdateWithWhereUniqueWithoutRecAreaInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutRecAreaInput[]
    | ReviewUpsertWithWhereUniqueWithoutRecAreaInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export interface ActivityCreateWithoutRecAreasInput {
  name: String;
}

export interface ReviewUpdateWithWhereUniqueWithoutRecAreaInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutRecAreaDataInput;
}

export interface ReviewCreateWithoutRecAreaInput {
  content?: String;
  user: UserCreateOneWithoutReviewsInput;
  rating: Int;
  images?: ImageCreateManyWithoutReviewInput;
}

export interface ReviewUpdateWithoutRecAreaDataInput {
  content?: String;
  user?: UserUpdateOneRequiredWithoutReviewsInput;
  rating?: Int;
  images?: ImageUpdateManyWithoutReviewInput;
}

export interface UserCreateWithoutReviewsInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email: String;
  emailValidated?: Boolean;
  validateEmailToken: String;
  favorites?: FavoriteCreateManyWithoutUserInput;
  images?: ImageCreateManyWithoutUserInput;
  name: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  resetToken: String;
  resetTokenExpiry?: Float;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  update?: UserUpdateWithoutReviewsDataInput;
  upsert?: UserUpsertWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface FavoriteCreateWithoutUserInput {
  recArea: RecAreaCreateOneWithoutFavoritesInput;
}

export interface UserUpdateWithoutReviewsDataInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  emailValidated?: Boolean;
  validateEmailToken?: String;
  favorites?: FavoriteUpdateManyWithoutUserInput;
  images?: ImageUpdateManyWithoutUserInput;
  name?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
}

export interface RecAreaCreateWithoutFavoritesInput {
  activities?: ActivityCreateManyWithoutRecAreasInput;
  description: String;
  directions?: String;
  images?: ImageCreateManyWithoutRecAreaInput;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
  reviews?: ReviewCreateManyWithoutRecAreaInput;
}

export interface FavoriteUpdateManyWithoutUserInput {
  create?: FavoriteCreateWithoutUserInput[] | FavoriteCreateWithoutUserInput;
  delete?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  connect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  disconnect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
  update?:
    | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    | FavoriteUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    | FavoriteUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: FavoriteScalarWhereInput[] | FavoriteScalarWhereInput;
}

export interface ImageCreateWithoutRecAreaInput {
  user: UserCreateOneWithoutImagesInput;
  review?: ReviewCreateOneWithoutImagesInput;
  image: String;
  largeImage?: String;
}

export interface FavoriteUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteWhereUniqueInput;
  data: FavoriteUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutImagesInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email: String;
  emailValidated?: Boolean;
  validateEmailToken: String;
  favorites?: FavoriteCreateManyWithoutUserInput;
  name: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  resetToken: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewCreateManyWithoutUserInput;
}

export interface FavoriteUpdateWithoutUserDataInput {
  recArea?: RecAreaUpdateOneRequiredWithoutFavoritesInput;
}

export interface ReviewCreateManyWithoutUserInput {
  create?: ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface RecAreaUpdateOneRequiredWithoutFavoritesInput {
  create?: RecAreaCreateWithoutFavoritesInput;
  update?: RecAreaUpdateWithoutFavoritesDataInput;
  upsert?: RecAreaUpsertWithoutFavoritesInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReviewWhereInput;
  AND?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  OR?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  NOT?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
}

export interface RecAreaUpdateWithoutFavoritesDataInput {
  activities?: ActivityUpdateManyWithoutRecAreasInput;
  description?: String;
  directions?: String;
  images?: ImageUpdateManyWithoutRecAreaInput;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
  reviews?: ReviewUpdateManyWithoutRecAreaInput;
}

export interface FavoriteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FavoriteWhereInput;
  AND?: FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput;
  OR?: FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput;
  NOT?: FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput;
}

export interface ImageUpdateManyWithoutRecAreaInput {
  create?: ImageCreateWithoutRecAreaInput[] | ImageCreateWithoutRecAreaInput;
  delete?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  disconnect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  update?:
    | ImageUpdateWithWhereUniqueWithoutRecAreaInput[]
    | ImageUpdateWithWhereUniqueWithoutRecAreaInput;
  upsert?:
    | ImageUpsertWithWhereUniqueWithoutRecAreaInput[]
    | ImageUpsertWithWhereUniqueWithoutRecAreaInput;
  deleteMany?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  updateMany?:
    | ImageUpdateManyWithWhereNestedInput[]
    | ImageUpdateManyWithWhereNestedInput;
}

export interface RecAreaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  activities_every?: ActivityWhereInput;
  activities_some?: ActivityWhereInput;
  activities_none?: ActivityWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  directions?: String;
  directions_not?: String;
  directions_in?: String[] | String;
  directions_not_in?: String[] | String;
  directions_lt?: String;
  directions_lte?: String;
  directions_gt?: String;
  directions_gte?: String;
  directions_contains?: String;
  directions_not_contains?: String;
  directions_starts_with?: String;
  directions_not_starts_with?: String;
  directions_ends_with?: String;
  directions_not_ends_with?: String;
  favorites_every?: FavoriteWhereInput;
  favorites_some?: FavoriteWhereInput;
  favorites_none?: FavoriteWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  lat?: Float;
  lat_not?: Float;
  lat_in?: Float[] | Float;
  lat_not_in?: Float[] | Float;
  lat_lt?: Float;
  lat_lte?: Float;
  lat_gt?: Float;
  lat_gte?: Float;
  long?: Float;
  long_not?: Float;
  long_in?: Float[] | Float;
  long_not_in?: Float[] | Float;
  long_lt?: Float;
  long_lte?: Float;
  long_gt?: Float;
  long_gte?: Float;
  mapUrl?: String;
  mapUrl_not?: String;
  mapUrl_in?: String[] | String;
  mapUrl_not_in?: String[] | String;
  mapUrl_lt?: String;
  mapUrl_lte?: String;
  mapUrl_gt?: String;
  mapUrl_gte?: String;
  mapUrl_contains?: String;
  mapUrl_not_contains?: String;
  mapUrl_starts_with?: String;
  mapUrl_not_starts_with?: String;
  mapUrl_ends_with?: String;
  mapUrl_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  reviews_every?: ReviewWhereInput;
  reviews_some?: ReviewWhereInput;
  reviews_none?: ReviewWhereInput;
  AND?: RecAreaWhereInput[] | RecAreaWhereInput;
  OR?: RecAreaWhereInput[] | RecAreaWhereInput;
  NOT?: RecAreaWhereInput[] | RecAreaWhereInput;
}

export interface ImageUpdateWithWhereUniqueWithoutRecAreaInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutRecAreaDataInput;
}

export interface ReviewUpdateManyMutationInput {
  content?: String;
  rating?: Int;
}

export interface ImageUpdateWithoutRecAreaDataInput {
  user?: UserUpdateOneRequiredWithoutImagesInput;
  review?: ReviewUpdateOneWithoutImagesInput;
  image?: String;
  largeImage?: String;
}

export interface RecAreaUpdateManyMutationInput {
  description?: String;
  directions?: String;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
}

export interface UserUpdateOneRequiredWithoutImagesInput {
  create?: UserCreateWithoutImagesInput;
  update?: UserUpdateWithoutImagesDataInput;
  upsert?: UserUpsertWithoutImagesInput;
  connect?: UserWhereUniqueInput;
}

export interface ImageUpdateManyMutationInput {
  image?: String;
  largeImage?: String;
}

export interface UserUpdateWithoutImagesDataInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  emailValidated?: Boolean;
  validateEmailToken?: String;
  favorites?: FavoriteUpdateManyWithoutUserInput;
  name?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewUpdateManyWithoutUserInput;
}

export interface FavoriteUpdateInput {
  user?: UserUpdateOneRequiredWithoutFavoritesInput;
  recArea?: RecAreaUpdateOneRequiredWithoutFavoritesInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface RecAreaUpsertWithoutActivitiesInput {
  update: RecAreaUpdateWithoutActivitiesDataInput;
  create: RecAreaCreateWithoutActivitiesInput;
}

export interface ReviewUpdateManyWithoutUserInput {
  create?: ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ReviewUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ReviewUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export interface ImageUpsertWithWhereUniqueWithoutUserInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutUserDataInput;
  create: ImageCreateWithoutUserInput;
}

export interface ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutUserDataInput;
}

export interface FavoriteCreateManyWithoutRecAreaInput {
  create?:
    | FavoriteCreateWithoutRecAreaInput[]
    | FavoriteCreateWithoutRecAreaInput;
  connect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
}

export interface ReviewUpdateWithoutUserDataInput {
  content?: String;
  rating?: Int;
  recArea?: RecAreaUpdateOneRequiredWithoutReviewsInput;
  images?: ImageUpdateManyWithoutReviewInput;
}

export interface ImageCreateManyWithoutUserInput {
  create?: ImageCreateWithoutUserInput[] | ImageCreateWithoutUserInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
}

export interface RecAreaUpdateOneRequiredWithoutReviewsInput {
  create?: RecAreaCreateWithoutReviewsInput;
  update?: RecAreaUpdateWithoutReviewsDataInput;
  upsert?: RecAreaUpsertWithoutReviewsInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ActivityCreateManyWithoutRecAreasInput {
  create?:
    | ActivityCreateWithoutRecAreasInput[]
    | ActivityCreateWithoutRecAreasInput;
  connect?: ActivityWhereUniqueInput[] | ActivityWhereUniqueInput;
}

export interface RecAreaUpdateWithoutReviewsDataInput {
  activities?: ActivityUpdateManyWithoutRecAreasInput;
  description?: String;
  directions?: String;
  favorites?: FavoriteUpdateManyWithoutRecAreaInput;
  images?: ImageUpdateManyWithoutRecAreaInput;
  lat?: Float;
  long?: Float;
  mapUrl?: String;
  name?: String;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface RecAreaUpsertWithoutReviewsInput {
  update: RecAreaUpdateWithoutReviewsDataInput;
  create: RecAreaCreateWithoutReviewsInput;
}

export interface RecAreaCreateOneWithoutFavoritesInput {
  create?: RecAreaCreateWithoutFavoritesInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ImageUpdateManyWithoutReviewInput {
  create?: ImageCreateWithoutReviewInput[] | ImageCreateWithoutReviewInput;
  delete?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  disconnect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  update?:
    | ImageUpdateWithWhereUniqueWithoutReviewInput[]
    | ImageUpdateWithWhereUniqueWithoutReviewInput;
  upsert?:
    | ImageUpsertWithWhereUniqueWithoutReviewInput[]
    | ImageUpsertWithWhereUniqueWithoutReviewInput;
  deleteMany?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  updateMany?:
    | ImageUpdateManyWithWhereNestedInput[]
    | ImageUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutImagesInput {
  create?: UserCreateWithoutImagesInput;
  connect?: UserWhereUniqueInput;
}

export interface ImageUpdateWithWhereUniqueWithoutReviewInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutReviewDataInput;
}

export interface ReviewWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  recArea?: RecAreaWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  AND?: ReviewWhereInput[] | ReviewWhereInput;
  OR?: ReviewWhereInput[] | ReviewWhereInput;
  NOT?: ReviewWhereInput[] | ReviewWhereInput;
}

export interface ImageUpdateWithoutReviewDataInput {
  user?: UserUpdateOneRequiredWithoutImagesInput;
  recArea?: RecAreaUpdateOneWithoutImagesInput;
  image?: String;
  largeImage?: String;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivityWhereInput;
  AND?: ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput;
  OR?: ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput;
  NOT?: ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput;
}

export interface ImageUpsertWithWhereUniqueWithoutReviewInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutReviewDataInput;
  create: ImageCreateWithoutReviewInput;
}

export type FavoriteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ImageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  AND?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  OR?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  NOT?: ImageScalarWhereInput[] | ImageScalarWhereInput;
}

export type RecAreaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface UserUpsertWithoutFavoritesInput {
  update: UserUpdateWithoutFavoritesDataInput;
  create: UserCreateWithoutFavoritesInput;
}

export interface ImageUpdateManyDataInput {
  image?: String;
  largeImage?: String;
}

export interface RecAreaCreateOneWithoutActivitiesInput {
  create?: RecAreaCreateWithoutActivitiesInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutUserDataInput;
  create: ReviewCreateWithoutUserInput;
}

export interface RecAreaCreateOneWithoutImagesInput {
  create?: RecAreaCreateWithoutImagesInput;
  connect?: RecAreaWhereUniqueInput;
}

export interface ReviewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  AND?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  OR?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  NOT?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
}

export interface FavoriteCreateManyWithoutUserInput {
  create?: FavoriteCreateWithoutUserInput[] | FavoriteCreateWithoutUserInput;
  connect?: FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface ReviewUpdateManyDataInput {
  content?: String;
  rating?: Int;
}

export interface UserUpdateInput {
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  email?: String;
  emailValidated?: Boolean;
  validateEmailToken?: String;
  favorites?: FavoriteUpdateManyWithoutUserInput;
  images?: ImageUpdateManyWithoutUserInput;
  name?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  resetToken?: String;
  resetTokenExpiry?: Float;
  reviews?: ReviewUpdateManyWithoutUserInput;
}

export interface UserUpsertWithoutImagesInput {
  update: UserUpdateWithoutImagesDataInput;
  create: UserCreateWithoutImagesInput;
}

export interface ActivityUpdateManyMutationInput {
  name?: String;
}

export interface ReviewUpdateOneWithoutImagesInput {
  create?: ReviewCreateWithoutImagesInput;
  update?: ReviewUpdateWithoutImagesDataInput;
  upsert?: ReviewUpsertWithoutImagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ReviewWhereUniqueInput;
}

export interface UserCreateOneWithoutFavoritesInput {
  create?: UserCreateWithoutFavoritesInput;
  connect?: UserWhereUniqueInput;
}

export interface RecAreaUpsertWithoutFavoritesInput {
  update: RecAreaUpdateWithoutFavoritesDataInput;
  create: RecAreaCreateWithoutFavoritesInput;
}

export interface ImageUpsertWithWhereUniqueWithoutRecAreaInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutRecAreaDataInput;
  create: ImageCreateWithoutRecAreaInput;
}

export interface ReviewUpsertWithoutImagesInput {
  update: ReviewUpdateWithoutImagesDataInput;
  create: ReviewCreateWithoutImagesInput;
}

export interface ReviewUpdateWithoutImagesDataInput {
  content?: String;
  user?: UserUpdateOneRequiredWithoutReviewsInput;
  rating?: Int;
  recArea?: RecAreaUpdateOneRequiredWithoutReviewsInput;
}

export interface ReviewCreateManyWithoutRecAreaInput {
  create?: ReviewCreateWithoutRecAreaInput[] | ReviewCreateWithoutRecAreaInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutRecAreaInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutRecAreaDataInput;
  create: ReviewCreateWithoutRecAreaInput;
}

export type ImageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  facebookId?: String;
  facebookId_not?: String;
  facebookId_in?: String[] | String;
  facebookId_not_in?: String[] | String;
  facebookId_lt?: String;
  facebookId_lte?: String;
  facebookId_gt?: String;
  facebookId_gte?: String;
  facebookId_contains?: String;
  facebookId_not_contains?: String;
  facebookId_starts_with?: String;
  facebookId_not_starts_with?: String;
  facebookId_ends_with?: String;
  facebookId_not_ends_with?: String;
  googleId?: String;
  googleId_not?: String;
  googleId_in?: String[] | String;
  googleId_not_in?: String[] | String;
  googleId_lt?: String;
  googleId_lte?: String;
  googleId_gt?: String;
  googleId_gte?: String;
  googleId_contains?: String;
  googleId_not_contains?: String;
  googleId_starts_with?: String;
  googleId_not_starts_with?: String;
  googleId_ends_with?: String;
  googleId_not_ends_with?: String;
  twitterId?: String;
  twitterId_not?: String;
  twitterId_in?: String[] | String;
  twitterId_not_in?: String[] | String;
  twitterId_lt?: String;
  twitterId_lte?: String;
  twitterId_gt?: String;
  twitterId_gte?: String;
  twitterId_contains?: String;
  twitterId_not_contains?: String;
  twitterId_starts_with?: String;
  twitterId_not_starts_with?: String;
  twitterId_ends_with?: String;
  twitterId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailValidated?: Boolean;
  emailValidated_not?: Boolean;
  validateEmailToken?: String;
  validateEmailToken_not?: String;
  validateEmailToken_in?: String[] | String;
  validateEmailToken_not_in?: String[] | String;
  validateEmailToken_lt?: String;
  validateEmailToken_lte?: String;
  validateEmailToken_gt?: String;
  validateEmailToken_gte?: String;
  validateEmailToken_contains?: String;
  validateEmailToken_not_contains?: String;
  validateEmailToken_starts_with?: String;
  validateEmailToken_not_starts_with?: String;
  validateEmailToken_ends_with?: String;
  validateEmailToken_not_ends_with?: String;
  favorites_every?: FavoriteWhereInput;
  favorites_some?: FavoriteWhereInput;
  favorites_none?: FavoriteWhereInput;
  images_every?: ImageWhereInput;
  images_some?: ImageWhereInput;
  images_none?: ImageWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  reviews_every?: ReviewWhereInput;
  reviews_some?: ReviewWhereInput;
  reviews_none?: ReviewWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ImageCreateManyWithoutRecAreaInput {
  create?: ImageCreateWithoutRecAreaInput[] | ImageCreateWithoutRecAreaInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  emailValidated: Boolean;
  validateEmailToken: String;
  name: String;
  password: String;
  permissions: Permission[];
  resetToken: String;
  resetTokenExpiry?: Float;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  facebookId: () => Promise<String>;
  googleId: () => Promise<String>;
  twitterId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailValidated: () => Promise<Boolean>;
  validateEmailToken: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
  googleId: () => Promise<AsyncIterator<String>>;
  twitterId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailValidated: () => Promise<AsyncIterator<Boolean>>;
  validateEmailToken: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
}

export interface FavoriteConnection {
  pageInfo: PageInfo;
  edges: FavoriteEdge[];
}

export interface FavoriteConnectionPromise
  extends Promise<FavoriteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FavoriteEdge>>() => T;
  aggregate: <T = AggregateFavoritePromise>() => T;
}

export interface FavoriteConnectionSubscription
  extends Promise<AsyncIterator<FavoriteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FavoriteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFavoriteSubscription>() => T;
}

export interface RecAreaPreviousValues {
  id: ID_Output;
  description: String;
  directions?: String;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
}

export interface RecAreaPreviousValuesPromise
  extends Promise<RecAreaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  directions: () => Promise<String>;
  lat: () => Promise<Float>;
  long: () => Promise<Float>;
  mapUrl: () => Promise<String>;
  name: () => Promise<String>;
}

export interface RecAreaPreviousValuesSubscription
  extends Promise<AsyncIterator<RecAreaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  directions: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  long: () => Promise<AsyncIterator<Float>>;
  mapUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface Review {
  id: ID_Output;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rating: Int;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  rating: () => Promise<Int>;
  recArea: <T = RecAreaPromise>() => T;
  images: <T = FragmentableArray<Image>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  rating: () => Promise<AsyncIterator<Int>>;
  recArea: <T = RecAreaSubscription>() => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Image {
  id: ID_Output;
  image: String;
  largeImage?: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  recArea: <T = RecAreaPromise>() => T;
  review: <T = ReviewPromise>() => T;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  recArea: <T = RecAreaSubscription>() => T;
  review: <T = ReviewSubscription>() => T;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
}

export interface RecAreaEdge {
  node: RecArea;
  cursor: String;
}

export interface RecAreaEdgePromise extends Promise<RecAreaEdge>, Fragmentable {
  node: <T = RecAreaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecAreaEdgeSubscription
  extends Promise<AsyncIterator<RecAreaEdge>>,
    Fragmentable {
  node: <T = RecAreaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Activity {
  id: ID_Output;
  name: String;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  recAreas: <T = RecAreaPromise>() => T;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  recAreas: <T = RecAreaSubscription>() => T;
}

export interface RecArea {
  id: ID_Output;
  description: String;
  directions?: String;
  lat: Float;
  long: Float;
  mapUrl?: String;
  name: String;
}

export interface RecAreaPromise extends Promise<RecArea>, Fragmentable {
  id: () => Promise<ID_Output>;
  activities: <T = FragmentableArray<Activity>>(
    args?: {
      where?: ActivityWhereInput;
      orderBy?: ActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<String>;
  directions: () => Promise<String>;
  favorites: <T = FragmentableArray<Favorite>>(
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  images: <T = FragmentableArray<Image>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lat: () => Promise<Float>;
  long: () => Promise<Float>;
  mapUrl: () => Promise<String>;
  name: () => Promise<String>;
  reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface RecAreaSubscription
  extends Promise<AsyncIterator<RecArea>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  activities: <T = Promise<AsyncIterator<ActivitySubscription>>>(
    args?: {
      where?: ActivityWhereInput;
      orderBy?: ActivityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<AsyncIterator<String>>;
  directions: () => Promise<AsyncIterator<String>>;
  favorites: <T = Promise<AsyncIterator<FavoriteSubscription>>>(
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lat: () => Promise<AsyncIterator<Float>>;
  long: () => Promise<AsyncIterator<Float>>;
  mapUrl: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFavorite {
  count: Int;
}

export interface AggregateFavoritePromise
  extends Promise<AggregateFavorite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFavoriteSubscription
  extends Promise<AsyncIterator<AggregateFavorite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  facebookId?: String;
  googleId?: String;
  twitterId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  emailValidated: Boolean;
  validateEmailToken: String;
  name: String;
  password: String;
  permissions: Permission[];
  resetToken: String;
  resetTokenExpiry?: Float;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  facebookId: () => Promise<String>;
  googleId: () => Promise<String>;
  twitterId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailValidated: () => Promise<Boolean>;
  validateEmailToken: () => Promise<String>;
  favorites: <T = FragmentableArray<Favorite>>(
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  images: <T = FragmentableArray<Image>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
  googleId: () => Promise<AsyncIterator<String>>;
  twitterId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailValidated: () => Promise<AsyncIterator<Boolean>>;
  validateEmailToken: () => Promise<AsyncIterator<String>>;
  favorites: <T = Promise<AsyncIterator<FavoriteSubscription>>>(
    args?: {
      where?: FavoriteWhereInput;
      orderBy?: FavoriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FavoriteSubscriptionPayload {
  mutation: MutationType;
  node: Favorite;
  updatedFields: String[];
  previousValues: FavoritePreviousValues;
}

export interface FavoriteSubscriptionPayloadPromise
  extends Promise<FavoriteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FavoritePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FavoritePreviousValuesPromise>() => T;
}

export interface FavoriteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FavoriteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FavoriteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FavoritePreviousValuesSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FavoritePreviousValues {
  id: ID_Output;
}

export interface FavoritePreviousValuesPromise
  extends Promise<FavoritePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface FavoritePreviousValuesSubscription
  extends Promise<AsyncIterator<FavoritePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rating: Int;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rating: () => Promise<Int>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface Favorite {
  id: ID_Output;
}

export interface FavoritePromise extends Promise<Favorite>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  recArea: <T = RecAreaPromise>() => T;
}

export interface FavoriteSubscription
  extends Promise<AsyncIterator<Favorite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  recArea: <T = RecAreaSubscription>() => T;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FavoriteEdge {
  node: Favorite;
  cursor: String;
}

export interface FavoriteEdgePromise
  extends Promise<FavoriteEdge>,
    Fragmentable {
  node: <T = FavoritePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FavoriteEdgeSubscription
  extends Promise<AsyncIterator<FavoriteEdge>>,
    Fragmentable {
  node: <T = FavoriteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RecAreaSubscriptionPayload {
  mutation: MutationType;
  node: RecArea;
  updatedFields: String[];
  previousValues: RecAreaPreviousValues;
}

export interface RecAreaSubscriptionPayloadPromise
  extends Promise<RecAreaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecAreaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecAreaPreviousValuesPromise>() => T;
}

export interface RecAreaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecAreaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecAreaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecAreaPreviousValuesSubscription>() => T;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ImagePreviousValues {
  id: ID_Output;
  image: String;
  largeImage?: String;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface RecAreaConnection {
  pageInfo: PageInfo;
  edges: RecAreaEdge[];
}

export interface RecAreaConnectionPromise
  extends Promise<RecAreaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecAreaEdge>>() => T;
  aggregate: <T = AggregateRecAreaPromise>() => T;
}

export interface RecAreaConnectionSubscription
  extends Promise<AsyncIterator<RecAreaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecAreaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecAreaSubscription>() => T;
}

export interface AggregateRecArea {
  count: Int;
}

export interface AggregateRecAreaPromise
  extends Promise<AggregateRecArea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecAreaSubscription
  extends Promise<AsyncIterator<AggregateRecArea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "Favorite",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "RecArea",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
