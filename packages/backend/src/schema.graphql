# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  # Creates an Activity
  createActivity(data: ActivityCreateInput!): Activity!
  # Updates an Activity
  updateActivity(
    data: ActivityUpdateInput!
    where: ActivityWhereUniqueInput!
  ): Activity
  # # Deletes an Activity
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  # # Deletes a User
  deleteUser(id: ID!): User
  # Creates a RecArea
  createRecArea(data: RecAreaCreateInput!): RecArea!
  # Updates a RecArea
  updateRecArea(
    data: RecAreaUpdateInput!
    where: RecAreaWhereUniqueInput!
  ): RecArea
  # Deletes a RecArea
  deleteRecArea(recAreaId: ID!): RecArea
  # Signs user up
  signup(
    email: String!
    password: String!
    name: String!
    avatar: String!
  ): AuthPayload!
  # Signs user in
  signin(email: String!, password: String!): AuthPayload!
  # Signs user out
  signout: SuccessMessage
  # User password reset email request
  requestReset(email: String!): User!
  # User password input for reset on site
  resetPassword(resetToken: String!, password: String!): AuthPayload!
  # Sends out an email link for users to validate their profile
  sendLinkValidateEmail: User!
  # Verifies the email token for email validation
  validateEmail(validateEmailToken: String!): AuthPayload!
  # Admin only function for permissions updates on user accounts
  updatePermissions(permissions: [Permission], userId: ID!): User
  # Adds a rec area to current user's favorites list
  addToFavorites(id: ID!): Favorite
  # Removes a rec area from a current user's favorites list
  removeFromFavorites(id: ID!): Favorite
  # Adds an image to user's profile, review, or rec area
  createImage(image: String, largeImage: String): Image!
  # Removes the image from user's profile, review, or rec area.
  deleteImage(id: ID!): Image
  # Adds a review to rec area being viewed
  createReview(data: ReviewCreateInput!): Review!
  # Updates a review
  updateReview(data: ReviewUpdateInput!): Review
  # Deletes a review
  deleteReview(id: ID!): Review
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(
    where: ActivityWhereInput
    orderBy: ActivityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Activity]!
  activitiesConnection(
    where: ActivityWhereInput
    orderBy: ActivityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ActivityConnection!
  favorite(id: ID!): Favorite
  favorites(
    where: FavoriteWhereInput
    orderBy: FavoriteOrderByInput
    skip: Int
    first: Int
  ): [Favorite]!
  # favoritesConnection(where: FavoriteOrderByInput): FavoriteConnection!
  image(id: ID!): Image
  images(orderBy: ImageOrderByInput, skip: Int, first: Int): [Image]!
  imagesConnection(where: ImageOrderByInput): ImageConnection!
  me: User
  users: [User]!
  recArea(id: ID!): RecArea
  recAreas(
    where: RecAreaWhereInput
    orderBy: RecAreaOrderByInput
    skip: Int
    first: Int
  ): [RecArea]!
  recAreasConnection(where: RecAreaWhereInput): RecAreaConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(
    where: ReviewWhereInput
    orderBy: ReviewOrderByInput
    skip: Int
    first: Int
  ): [Review]!
  reviewsConnection(where: ReviewOrderByInput): ReviewConnection
  topRatedRecAreas: [RecArea!]!
  topFavoriteRecAreas: [RecArea!]!
  imagesByCurrentUser: ImageConnection
  imagesByRecArea(recAreaId: String!): ImageConnection
  imagesByReview(reviewId: String!): ImageConnection
  totalFavorByCurrentUser: FavoriteConnection
  totalFavorByRecArea(recAreaId: String!): FavoriteConnection
  totalReviewsByCurrentUser: ReviewConnection
  totalReviewsByRecArea(recAreaId: String!): ReviewConnection
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  favorites: [Favorite!]!
  reviews: [Review!]!
  images: [Image!]!
}

type AuthPayload {
  token: String!
  user: User!
}
