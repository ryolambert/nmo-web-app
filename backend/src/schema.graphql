"""
* ---------------GraphQL Schema (public-facing API interface)------------------*
This file is our public facing api, that interfaces with our javascript: Contains all of our queries (Query.js) and resolvers (Mutation.js). Cannot be left empty and since it's being referred to in the function createServer we need to define the resolvers of Mutation and Query
* GRAPHQL NOTE: Creating a new type for a response message
# import * from './generated/prisma.graphql'
*------------------------------------------------------------------------------*
"""
type SuccessMessage {
  message: String
}

type Mutation {
  # Creates a RecArea
  createRecArea(
    name: String
    lat: Float
    long: Float
    description: String
    activities: [Activity]
    images: [Image]
  ): RecArea!
  # Updates a RecArea
  updateRecArea(
    id: ID!
    name: String
    lat: Float
    long: Float
    description: String
    activities: [Activity]
    images: [Image]
  ): RecArea!
  # Deletes a RecArea
  deleteRecArea(id: ID!): RecArea
  # Signs user up
  signup(email: String!, password: String!, name: String!): User!
  # Signs user in
  signin(email: String!, password: String!): User!
  # Signs user out
  signout: SuccessMessage
  # User password reset email request
  requestReset(email: String!): SuccessMessage
  # User password input for reset on site
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  # Admin only function for permissions updates on user accounts
  updatePermissions(permissions: [Permission], userId: ID!): User
  # Adds a rec area to current user's favorites list
  addToFavorites(id: ID!): Favorite
  # Removes a rec area from a current user's favorites list
  removeFromFavorites(id: ID!): Favorite
  # Adds an image to user's profile, review, or rec area
  createImage(image: String, largeImage: String): Image!
  # Removes the image from user's profile, review, or rec area.
  deleteImage(id: ID!): Image
  # TODO: Reviews (createReview, updateReview, deleteReview)
}

type Query {
  # TODO: Reviews
  recAreas(
    where: RecAreaWhereInput
    orderBy: RecAreaOrderByInput
    skip: Int
    first: Int
  ): [RecArea]!
  recArea(where: RecAreaWhereUniqueInput!): RecArea
  recAreasConnection(where: RecAreaWhereInput): RecAreaConnection!
  me: User
  users: [User]!
  favorite(id: ID!): Favorite
  favorites(orderBy: FavoriteOrderByInput): [Favorite]!
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  favorites: [Favorite!]!
  reviews: [Review!]!
  images: [Image!]!
}

type AuthPayload {
  token: String!
  user: User!
}
